{
  "id": "time_series_3",
  "title": "时间序列异常检测",
  "description": "使用Python进行时间序列异常检测分析",
  "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 设置中文显示\nplt.rcParams['font.sans-serif'] = ['SimHei']\nplt.rcParams['axes.unicode_minus'] = False\n\n# 创建示例时间序列数据\nnp.random.seed(42)\ndates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D')\n\n# 创建基础时间序列\nbase_signal = 100 + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 20\nnoise = np.random.normal(0, 2, len(dates))\n\n# 添加一些异常值\nanomalies_idx = np.random.choice(len(dates), 10, replace=False)\nanomalies = np.random.normal(150, 10, 10)\n\nvalues = base_signal + noise\nvalues[anomalies_idx] = anomalies\n\n# 创建DataFrame\ndf = pd.DataFrame({\n    'date': dates,\n    'value': values\n})\ndf.set_index('date', inplace=True)\n\n# 1. 基于统计的异常检测\n# Z-score方法\ndef detect_anomalies_zscore(data, threshold=3):\n    z_scores = np.abs(stats.zscore(data))\n    return z_scores > threshold\n\n# IQR方法\ndef detect_anomalies_iqr(data):\n    Q1 = data.quantile(0.25)\n    Q3 = data.quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    return (data < lower_bound) | (data > upper_bound)\n\n# 移动平均方法\ndef detect_anomalies_moving_average(data, window=7, threshold=2):\n    rolling_mean = data.rolling(window=window).mean()\n    rolling_std = data.rolling(window=window).std()\n    return np.abs(data - rolling_mean) > threshold * rolling_std\n\n# 2. 基于机器学习的异常检测\n# Isolation Forest\ndef detect_anomalies_iforest(data, contamination=0.1):\n    scaler = StandardScaler()\n    data_scaled = scaler.fit_transform(data.values.reshape(-1, 1))\n    \n    iforest = IsolationForest(contamination=contamination, random_state=42)\n    predictions = iforest.fit_predict(data_scaled)\n    return predictions == -1\n\n# 应用各种异常检测方法\ndf['anomaly_zscore'] = detect_anomalies_zscore(df['value'])\ndf['anomaly_iqr'] = detect_anomalies_iqr(df['value'])\ndf['anomaly_ma'] = detect_anomalies_moving_average(df['value'])\ndf['anomaly_iforest'] = detect_anomalies_iforest(df['value'])\n\n# 3. 可视化结果\n# Z-score方法\nplt.figure(figsize=(12, 8))\n\nplt.subplot(221)\nplt.plot(df.index, df['value'], label='原始数据')\nplt.scatter(df[df['anomaly_zscore']].index,\n            df[df['anomaly_zscore']]['value'],\n            color='red', label='异常点')\nplt.title('Z-score方法检测结果')\nplt.legend()\n\n# IQR方法\nplt.subplot(222)\nplt.plot(df.index, df['value'], label='原始数据')\nplt.scatter(df[df['anomaly_iqr']].index,\n            df[df['anomaly_iqr']]['value'],\n            color='red', label='异常点')\nplt.title('IQR方法检测结果')\nplt.legend()\n\n# 移动平均方法\nplt.subplot(223)\nplt.plot(df.index, df['value'], label='原始数据')\nplt.scatter(df[df['anomaly_ma']].index,\n            df[df['anomaly_ma']]['value'],\n            color='red', label='异常点')\nplt.title('移动平均方法检测结果')\nplt.legend()\n\n# Isolation Forest方法\nplt.subplot(224)\nplt.plot(df.index, df['value'], label='原始数据')\nplt.scatter(df[df['anomaly_iforest']].index,\n            df[df['anomaly_iforest']]['value'],\n            color='red', label='异常点')\nplt.title('Isolation Forest方法检测结果')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n\n# 4. 统计分析\nprint('各方法检测到的异常点数量：')\nprint(f'Z-score方法: {df.anomaly_zscore.sum()}')\nprint(f'IQR方法: {df.anomaly_iqr.sum()}')\nprint(f'移动平均方法: {df.anomaly_ma.sum()}')\nprint(f'Isolation Forest方法: {df.anomaly_iforest.sum()}')\n\n# 5. 方法比较\n# 创建混合检测结果\ndf['anomaly_count'] = df[['anomaly_zscore', 'anomaly_iqr',\n                         'anomaly_ma', 'anomaly_iforest']].sum(axis=1)\n\n# 可视化不同方法的一致性\nplt.figure(figsize=(12, 6))\nplt.plot(df.index, df['value'], label='原始数据', alpha=0.5)\n\n# 根据检测方法数量使用不同颜色标记异常点\nfor i in range(1, 5):\n    mask = df['anomaly_count'] == i\n    plt.scatter(df[mask].index, df[mask]['value'],\n                label=f'{i}种方法检测到', alpha=0.6)\n\nplt.title('不同异常检测方法的一致性比较')\nplt.legend()\nplt.show()\n\n# 6. 异常值特征分析\n# 计算异常值的基本统计特征\nprint('\\n异常值统计特征：')\nanomalies = df[df['anomaly_count'] >= 2]['value']\nprint(anomalies.describe())\n\n# 绘制异常值的分布\nplt.figure(figsize=(12, 4))\n\nplt.subplot(121)\nsns.boxplot(data=df, y='value')\nplt.title('整体数据分布')\n\nplt.subplot(122)\nsns.histplot(data=df, x='value', hue='anomaly_count')\nplt.title('数据分布（按检测方法数量）')\n\nplt.tight_layout()\nplt.show()",
  "category_id": "time_series",
  "tags": ["时间序列", "异常检测", "机器学习"],
  "use_count": 0,
  "created_at": "2024-01-23T00:00:00",
  "updated_at": "2024-01-23T00:00:00"
} 