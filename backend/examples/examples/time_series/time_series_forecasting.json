{
  "id": "time_series_2",
  "title": "时间序列预测",
  "description": "使用Python进行时间序列预测分析",
  "code": "import pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport matplotlib.pyplot as plt\n\n# 设置中文显示\nplt.rcParams['font.sans-serif'] = ['SimHei']\nplt.rcParams['axes.unicode_minus'] = False\n\n# 创建示例时间序列数据\nnp.random.seed(42)\ndates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='D')\n\n# 创建带有趋势、季节性和噪声的时间序列\ntrend = np.linspace(0, 10, len(dates))\nseasonal = 5 * np.sin(np.arange(len(dates)) * 2 * np.pi / 365)\nnoise = np.random.normal(0, 1, len(dates))\nvalues = 100 + trend + seasonal + noise\n\n# 创建时间序列DataFrame\ndf = pd.DataFrame({\n    'date': dates,\n    'value': values\n})\ndf.set_index('date', inplace=True)\n\n# 1. 时间序列分解\ndecomposition = seasonal_decompose(df['value'], period=365)\n\n# 可视化分解结果\nplt.figure(figsize=(12, 10))\n\nplt.subplot(411)\nplt.plot(df.index, df['value'])\nplt.title('原始时间序列')\n\nplt.subplot(412)\nplt.plot(df.index, decomposition.trend)\nplt.title('趋势')\n\nplt.subplot(413)\nplt.plot(df.index, decomposition.seasonal)\nplt.title('季节性')\n\nplt.subplot(414)\nplt.plot(df.index, decomposition.resid)\nplt.title('残差')\n\nplt.tight_layout()\nplt.show()\n\n# 2. 平稳性检验（ADF检验）\ndef adf_test(series):\n    result = adfuller(series)\n    print('ADF检验结果：')\n    print(f'ADF统计量: {result[0]:.4f}')\n    print(f'p值: {result[1]:.4f}')\n    print('临界值：')\n    for key, value in result[4].items():\n        print(f'\\t{key}: {value:.4f}')\n\nprint('原始序列的平稳性检验：')\nadf_test(df['value'])\n\n# 3. ARIMA模型预测\n# 划分训练集和测试集\ntrain_size = int(len(df) * 0.8)\ntrain = df[:train_size]\ntest = df[train_size:]\n\n# 拟合ARIMA模型\narima_model = ARIMA(train['value'], order=(1, 1, 1))\narima_results = arima_model.fit()\n\n# 预测\narima_forecast = arima_results.forecast(steps=len(test))\n\n# 4. Holt-Winters预测\n# 拟合Holt-Winters模型\nhw_model = ExponentialSmoothing(\n    train['value'],\n    seasonal_periods=7,\n    trend='add',\n    seasonal='add'\n)\nhw_results = hw_model.fit()\n\n# 预测\nhw_forecast = hw_results.forecast(len(test))\n\n# 5. 评估预测结果\ndef evaluate_forecast(actual, predicted, model_name):\n    mse = mean_squared_error(actual, predicted)\n    rmse = np.sqrt(mse)\n    mae = mean_absolute_error(actual, predicted)\n    print(f'\\n{model_name}预测评估：')\n    print(f'均方误差(MSE): {mse:.4f}')\n    print(f'均方根误差(RMSE): {rmse:.4f}')\n    print(f'平均绝对误差(MAE): {mae:.4f}')\n\nevaluate_forecast(test['value'], arima_forecast, 'ARIMA')\nevaluate_forecast(test['value'], hw_forecast, 'Holt-Winters')\n\n# 6. 可视化预测结果\nplt.figure(figsize=(12, 6))\n\n# 绘制原始数据\nplt.plot(train.index, train['value'], label='训练数据')\nplt.plot(test.index, test['value'], label='测试数据')\n\n# 绘制预测结果\nplt.plot(test.index, arima_forecast, label='ARIMA预测')\nplt.plot(test.index, hw_forecast, label='Holt-Winters预测')\n\nplt.title('时间序列预测结果对比')\nplt.xlabel('日期')\nplt.ylabel('值')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n# 7. 预测未来值\n# 使用全部数据重新训练模型\nfinal_arima_model = ARIMA(df['value'], order=(1, 1, 1))\nfinal_arima_results = final_arima_model.fit()\n\nfinal_hw_model = ExponentialSmoothing(\n    df['value'],\n    seasonal_periods=7,\n    trend='add',\n    seasonal='add'\n)\nfinal_hw_results = final_hw_model.fit()\n\n# 预测未来30天\nfuture_dates = pd.date_range(\n    start=df.index[-1] + pd.Timedelta(days=1),\n    periods=30,\n    freq='D'\n)\n\narima_future = final_arima_results.forecast(steps=30)\nhw_future = final_hw_results.forecast(30)\n\n# 可视化未来预测\nplt.figure(figsize=(12, 6))\n\n# 绘制历史数据\nplt.plot(df.index, df['value'], label='历史数据')\n\n# 绘制预测结果\nplt.plot(future_dates, arima_future, label='ARIMA预测')\nplt.plot(future_dates, hw_future, label='Holt-Winters预测')\n\nplt.title('未来30天预测')\nplt.xlabel('日期')\nplt.ylabel('值')\nplt.legend()\nplt.grid(True)\nplt.show()",
  "category_id": "time_series",
  "tags": ["时间序列", "预测分析", "ARIMA", "Holt-Winters"],
  "use_count": 0,
  "created_at": "2024-01-23T00:00:00",
  "updated_at": "2024-01-23T00:00:00"
} 