{
  "id": "data_export_2",
  "title": "API数据导出",
  "description": "使用Python将数据导出到各种API接口",
  "code": "import pandas as pd\nimport numpy as np\nimport requests\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List, Any\n\n# 创建示例数据\ndata = {\n    'name': ['张三', '李四', '王五', '赵六', '钱七'],\n    'age': [25, 30, 35, 28, 32],\n    'salary': [8000, 12000, 15000, 9000, 13000],\n    'department': ['技术', '销售', '技术', '市场', '销售'],\n    'join_date': ['2020-01-01', '2019-06-15', '2021-03-01', '2020-08-01', '2018-12-01']\n}\n\n# 创建DataFrame\ndf = pd.DataFrame(data)\n\n# 1. RESTful API导出\nclass RestApiExporter:\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer your_token_here'\n        }\n    \n    def export_data(self, data: Dict[str, Any]) -> requests.Response:\n        \"\"\"导出数据到REST API\"\"\"\n        try:\n            response = requests.post(\n                f'{self.base_url}/api/data',\n                json=data,\n                headers=self.headers\n            )\n            response.raise_for_status()\n            return response\n        except requests.exceptions.RequestException as e:\n            print(f'API导出错误：{str(e)}')\n            raise\n\n# 示例使用（注释掉实际API调用）\n'''\nrest_exporter = RestApiExporter('https://api.example.com')\ndata_to_export = {\n    'data': df.to_dict('records'),\n    'metadata': {\n        'total_records': len(df),\n        'export_time': datetime.now().isoformat()\n    }\n}\nresponse = rest_exporter.export_data(data_to_export)\nprint(f'API响应状态码：{response.status_code}')\nprint(f'API响应内容：{response.json()}')\n'''\n\n# 2. WebSocket导出\nimport websockets\nimport asyncio\n\nclass WebSocketExporter:\n    async def connect(self, uri: str):\n        self.websocket = await websockets.connect(uri)\n    \n    async def export_data(self, data: Dict[str, Any]):\n        \"\"\"通过WebSocket导出数据\"\"\"\n        try:\n            await self.websocket.send(json.dumps(data))\n            response = await self.websocket.recv()\n            return response\n        except Exception as e:\n            print(f'WebSocket导出错误：{str(e)}')\n            raise\n    \n    async def close(self):\n        await self.websocket.close()\n\n# 示例使用（注释掉实际WebSocket调用）\n'''\nasync def export_to_websocket():\n    exporter = WebSocketExporter()\n    await exporter.connect('ws://example.com/ws')\n    \n    data_to_export = {\n        'type': 'data_export',\n        'payload': df.to_dict('records')\n    }\n    \n    response = await exporter.export_data(data_to_export)\n    print(f'WebSocket响应：{response}')\n    \n    await exporter.close()\n\nasyncio.run(export_to_websocket())\n'''\n\n# 3. GraphQL API导出\nfrom gql import gql, Client\nfrom gql.transport.requests import RequestsHTTPTransport\n\nclass GraphQLExporter:\n    def __init__(self, url: str):\n        transport = RequestsHTTPTransport(url=url)\n        self.client = Client(transport=transport, fetch_schema_from_transport=True)\n    \n    def export_data(self, data: List[Dict[str, Any]]):\n        \"\"\"导出数据到GraphQL API\"\"\"\n        # 构建mutation\n        mutation = gql(\"\"\"\n        mutation ExportData($data: [EmployeeInput!]!) {\n            exportEmployees(data: $data) {\n                success\n                message\n                exportedCount\n            }\n        }\n        \"\"\")\n        \n        try:\n            result = self.client.execute(\n                mutation,\n                variable_values={'data': data}\n            )\n            return result\n        except Exception as e:\n            print(f'GraphQL导出错误：{str(e)}')\n            raise\n\n# 示例使用（注释掉实际GraphQL调用）\n'''\ngraphql_exporter = GraphQLExporter('https://api.example.com/graphql')\nresult = graphql_exporter.export_data(df.to_dict('records'))\nprint(f'GraphQL响应：{result}')\n'''\n\n# 4. 消息队列导出\nfrom kafka import KafkaProducer\nfrom redis import Redis\nimport pika\n\nclass MessageQueueExporter:\n    def export_to_kafka(self, data: Dict[str, Any]):\n        \"\"\"导出数据到Kafka\"\"\"\n        try:\n            producer = KafkaProducer(\n                bootstrap_servers=['localhost:9092'],\n                value_serializer=lambda v: json.dumps(v).encode('utf-8')\n            )\n            \n            producer.send('data_export', data)\n            producer.flush()\n            producer.close()\n        except Exception as e:\n            print(f'Kafka导出错误：{str(e)}')\n            raise\n    \n    def export_to_redis(self, data: Dict[str, Any]):\n        \"\"\"导出数据到Redis\"\"\"\n        try:\n            redis_client = Redis(host='localhost', port=6379, db=0)\n            redis_client.set('exported_data', json.dumps(data))\n            redis_client.close()\n        except Exception as e:\n            print(f'Redis导出错误：{str(e)}')\n            raise\n    \n    def export_to_rabbitmq(self, data: Dict[str, Any]):\n        \"\"\"导出数据到RabbitMQ\"\"\"\n        try:\n            connection = pika.BlockingConnection(\n                pika.ConnectionParameters('localhost')\n            )\n            channel = connection.channel()\n            \n            channel.queue_declare(queue='data_export')\n            channel.basic_publish(\n                exchange='',\n                routing_key='data_export',\n                body=json.dumps(data)\n            )\n            \n            connection.close()\n        except Exception as e:\n            print(f'RabbitMQ导出错误：{str(e)}')\n            raise\n\n# 示例使用（注释掉实际消息队列调用）\n'''\nmq_exporter = MessageQueueExporter()\n\n# 导出到Kafka\nmq_exporter.export_to_kafka({\n    'data': df.to_dict('records'),\n    'timestamp': datetime.now().isoformat()\n})\n\n# 导出到Redis\nmq_exporter.export_to_redis({\n    'data': df.to_dict('records'),\n    'timestamp': datetime.now().isoformat()\n})\n\n# 导出到RabbitMQ\nmq_exporter.export_to_rabbitmq({\n    'data': df.to_dict('records'),\n    'timestamp': datetime.now().isoformat()\n})\n'''\n\n# 5. FTP/SFTP导出\nfrom ftplib import FTP\nimport pysftp\n\nclass FtpExporter:\n    def export_to_ftp(self, data: Dict[str, Any],\n                      host: str, user: str, passwd: str):\n        \"\"\"导出数据到FTP服务器\"\"\"\n        try:\n            # 保存数据到临时文件\n            temp_file = 'temp_export.json'\n            with open(temp_file, 'w', encoding='utf-8') as f:\n                json.dump(data, f, ensure_ascii=False, indent=2)\n            \n            # 连接FTP服务器并上传文件\n            with FTP(host) as ftp:\n                ftp.login(user=user, passwd=passwd)\n                \n                with open(temp_file, 'rb') as f:\n                    ftp.storbinary(f'STOR {temp_file}', f)\n            \n            # 删除临时文件\n            Path(temp_file).unlink()\n        except Exception as e:\n            print(f'FTP导出错误：{str(e)}')\n            raise\n    \n    def export_to_sftp(self, data: Dict[str, Any],\n                        host: str, user: str, passwd: str):\n        \"\"\"导出数据到SFTP服务器\"\"\"\n        try:\n            # 保存数据到临时文件\n            temp_file = 'temp_export.json'\n            with open(temp_file, 'w', encoding='utf-8') as f:\n                json.dump(data, f, ensure_ascii=False, indent=2)\n            \n            # 连接SFTP服务器并上传文件\n            cnopts = pysftp.CnOpts()\n            cnopts.hostkeys = None  # 在生产环境中应该正确设置主机密钥\n            \n            with pysftp.Connection(host, username=user,\n                                  password=passwd,\n                                  cnopts=cnopts) as sftp:\n                sftp.put(temp_file)\n            \n            # 删除临时文件\n            Path(temp_file).unlink()\n        except Exception as e:\n            print(f'SFTP导出错误：{str(e)}')\n            raise\n\n# 示例使用（注释掉实际FTP/SFTP调用）\n'''\nftp_exporter = FtpExporter()\n\n# 导出到FTP\nftp_exporter.export_to_ftp(\n    data={'data': df.to_dict('records')},\n    host='ftp.example.com',\n    user='username',\n    passwd='password'\n)\n\n# 导出到SFTP\nftp_exporter.export_to_sftp(\n    data={'data': df.to_dict('records')},\n    host='sftp.example.com',\n    user='username',\n    passwd='password'\n)\n'''\n\n# 6. 云存储导出\nfrom google.cloud import storage\nimport boto3\nfrom azure.storage.blob import BlobServiceClient\n\nclass CloudStorageExporter:\n    def export_to_gcs(self, data: Dict[str, Any],\n                      bucket_name: str, blob_name: str):\n        \"\"\"导出数据到Google Cloud Storage\"\"\"\n        try:\n            client = storage.Client()\n            bucket = client.bucket(bucket_name)\n            blob = bucket.blob(blob_name)\n            \n            blob.upload_from_string(\n                json.dumps(data, ensure_ascii=False),\n                content_type='application/json'\n            )\n        except Exception as e:\n            print(f'GCS导出错误：{str(e)}')\n            raise\n    \n    def export_to_s3(self, data: Dict[str, Any],\n                     bucket_name: str, object_name: str):\n        \"\"\"导出数据到Amazon S3\"\"\"\n        try:\n            s3_client = boto3.client('s3')\n            \n            s3_client.put_object(\n                Bucket=bucket_name,\n                Key=object_name,\n                Body=json.dumps(data, ensure_ascii=False),\n                ContentType='application/json'\n            )\n        except Exception as e:\n            print(f'S3导出错误：{str(e)}')\n            raise\n    \n    def export_to_azure_blob(self, data: Dict[str, Any],\n                             connection_string: str,\n                             container_name: str,\n                             blob_name: str):\n        \"\"\"导出数据到Azure Blob Storage\"\"\"\n        try:\n            blob_service_client = BlobServiceClient.from_connection_string(\n                connection_string\n            )\n            container_client = blob_service_client.get_container_client(\n                container_name\n            )\n            blob_client = container_client.get_blob_client(blob_name)\n            \n            blob_client.upload_blob(\n                json.dumps(data, ensure_ascii=False),\n                overwrite=True\n            )\n        except Exception as e:\n            print(f'Azure Blob导出错误：{str(e)}')\n            raise\n\n# 示例使用（注释掉实际云存储调用）\n'''\ncloud_exporter = CloudStorageExporter()\n\n# 导出到Google Cloud Storage\ncloud_exporter.export_to_gcs(\n    data={'data': df.to_dict('records')},\n    bucket_name='my-bucket',\n    blob_name='exported_data.json'\n)\n\n# 导出到Amazon S3\ncloud_exporter.export_to_s3(\n    data={'data': df.to_dict('records')},\n    bucket_name='my-bucket',\n    object_name='exported_data.json'\n)\n\n# 导出到Azure Blob Storage\ncloud_exporter.export_to_azure_blob(\n    data={'data': df.to_dict('records')},\n    connection_string='your_connection_string',\n    container_name='my-container',\n    blob_name='exported_data.json'\n)\n'''",
  "category_id": "data_export",
  "tags": ["数据导出", "API", "云存储", "消息队列"],
  "use_count": 0,
  "created_at": "2024-01-23T00:00:00",
  "updated_at": "2024-01-23T00:00:00"
} 