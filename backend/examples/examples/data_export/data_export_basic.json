{
  "id": "data_export_1",
  "title": "基础数据导出",
  "description": "使用Python将数据导出为各种常见格式",
  "code": "import pandas as pd\nimport numpy as np\nimport json\nimport csv\nimport sqlite3\nfrom pathlib import Path\n\n# 创建示例数据\ndata = {\n    '姓名': ['张三', '李四', '王五', '赵六', '钱七'],\n    '年龄': [25, 30, 35, 28, 32],\n    '工资': [8000, 12000, 15000, 9000, 13000],\n    '部门': ['技术', '销售', '技术', '市场', '销售'],\n    '入职日期': ['2020-01-01', '2019-06-15', '2021-03-01', '2020-08-01', '2018-12-01']\n}\n\n# 创建DataFrame\ndf = pd.DataFrame(data)\n\n# 创建输出目录\noutput_dir = Path('output')\noutput_dir.mkdir(exist_ok=True)\n\n# 1. 导出为CSV文件\n# 基本导出\ncsv_path = output_dir / 'employees.csv'\ndf.to_csv(csv_path, index=False, encoding='utf-8')\nprint(f'数据已导出到CSV文件：{csv_path}')\n\n# 自定义CSV导出\ncsv_custom_path = output_dir / 'employees_custom.csv'\ndf.to_csv(csv_custom_path,\n          index=False,\n          encoding='utf-8-sig',  # 使用带BOM的UTF-8编码\n          sep=';',  # 使用分号作为分隔符\n          date_format='%Y-%m-%d',  # 日期格式\n          float_format='%.2f')  # 数字格式\nprint(f'数据已导出到自定义CSV文件：{csv_custom_path}')\n\n# 2. 导出为Excel文件\n# 基本导出\nexcel_path = output_dir / 'employees.xlsx'\ndf.to_excel(excel_path, index=False, sheet_name='员工信息')\nprint(f'数据已导出到Excel文件：{excel_path}')\n\n# 多表导出\nwith pd.ExcelWriter(output_dir / 'employees_multi.xlsx') as writer:\n    # 原始数据表\n    df.to_excel(writer, sheet_name='原始数据', index=False)\n    \n    # 部门统计表\n    dept_stats = df.groupby('部门').agg({\n        '工资': ['count', 'mean', 'sum'],\n        '年龄': ['mean', 'min', 'max']\n    }).round(2)\n    dept_stats.to_excel(writer, sheet_name='部门统计')\n    \n    # 工资分布表\n    salary_dist = pd.cut(df['工资'],\n                        bins=[0, 8000, 10000, 12000, 15000],\n                        labels=['<8k', '8k-10k', '10k-12k', '12k+'])\n    salary_stats = pd.crosstab(salary_dist, df['部门'])\n    salary_stats.to_excel(writer, sheet_name='工资分布')\n\nprint(f'数据已导出到多表Excel文件：{output_dir / \"employees_multi.xlsx\"}')\n\n# 3. 导出为JSON文件\n# 基本导出\njson_path = output_dir / 'employees.json'\ndf.to_json(json_path, force_ascii=False, indent=2)\nprint(f'数据已导出到JSON文件：{json_path}')\n\n# 自定义JSON格式\njson_custom_path = output_dir / 'employees_custom.json'\nemployees_dict = {\n    'employees': df.to_dict('records'),\n    'metadata': {\n        'total_count': len(df),\n        'departments': df['部门'].unique().tolist(),\n        'salary_range': {\n            'min': df['工资'].min(),\n            'max': df['工资'].max(),\n            'mean': df['工资'].mean()\n        }\n    }\n}\nwith open(json_custom_path, 'w', encoding='utf-8') as f:\n    json.dump(employees_dict, f, ensure_ascii=False, indent=2)\nprint(f'数据已导出到自定义JSON文件：{json_custom_path}')\n\n# 4. 导出为SQLite数据库\ndb_path = output_dir / 'employees.db'\nconn = sqlite3.connect(db_path)\n\n# 导出主表\ndf.to_sql('employees', conn, if_exists='replace', index=False)\n\n# 创建和导出部门统计表\ndept_stats = df.groupby('部门').agg({\n    '工资': ['count', 'mean', 'sum'],\n    '年龄': ['mean', 'min', 'max']\n}).round(2)\ndept_stats.to_sql('department_stats', conn, if_exists='replace')\n\n# 创建视图\nconn.execute('''\nCREATE VIEW IF NOT EXISTS high_salary_employees AS\nSELECT * FROM employees WHERE 工资 > 10000\n''')\n\nconn.close()\nprint(f'数据已导出到SQLite数据库：{db_path}')\n\n# 5. 导出为HTML文件\n# 基本导出\nhtml_path = output_dir / 'employees.html'\ndf.to_html(html_path, index=False, encoding='utf-8')\nprint(f'数据已导出到HTML文件：{html_path}')\n\n# 带样式的HTML导出\nhtml_styled_path = output_dir / 'employees_styled.html'\nstyles = [\n    dict(selector='table', props=[('border-collapse', 'collapse'),\n                                  ('width', '100%')]),\n    dict(selector='th', props=[('background-color', '#f2f2f2'),\n                              ('padding', '8px'),\n                              ('text-align', 'left')]),\n    dict(selector='td', props=[('padding', '8px'),\n                              ('border', '1px solid #ddd')])\n]\n\nstyled_df = df.style\\\n    .set_table_styles(styles)\\\n    .background_gradient(subset=['工资'], cmap='YlOrRd')\\\n    .highlight_max(subset=['年龄'], color='lightgreen')\n\nwith open(html_styled_path, 'w', encoding='utf-8') as f:\n    f.write('<html><head><title>员工信息表</title></head><body>')\n    f.write('<h1>员工信息表</h1>')\n    f.write(styled_df.to_html())\n    f.write('</body></html>')\n\nprint(f'数据已导出到样式化HTML文件：{html_styled_path}')\n\n# 6. 导出为Markdown文件\nmd_path = output_dir / 'employees.md'\nwith open(md_path, 'w', encoding='utf-8') as f:\n    f.write('# 员工信息表\\n\\n')\n    f.write(df.to_markdown(index=False))\n    \n    f.write('\\n\\n## 部门统计\\n\\n')\n    f.write(dept_stats.to_markdown())\n\nprint(f'数据已导出到Markdown文件：{md_path}')\n\n# 7. 导出为LaTeX文件\nlatex_path = output_dir / 'employees.tex'\nwith open(latex_path, 'w', encoding='utf-8') as f:\n    f.write('\\\\begin{document}\\n\\n')\n    f.write('\\\\section{员工信息表}\\n\\n')\n    f.write(df.to_latex(index=False))\n    f.write('\\n\\n\\\\end{document}')\n\nprint(f'数据已导出到LaTeX文件：{latex_path}')",
  "category_id": "data_export",
  "tags": ["数据导出", "pandas", "文件格式"],
  "use_count": 0,
  "created_at": "2024-01-23T00:00:00",
  "updated_at": "2024-01-23T00:00:00"
} 