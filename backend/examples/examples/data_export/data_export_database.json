{
  "id": "data_export_3",
  "title": "数据库导出",
  "description": "使用Python将数据导出到各种数据库",
  "code": "import pandas as pd\nimport numpy as np\nimport sqlite3\nimport pymysql\nimport psycopg2\nfrom sqlalchemy import create_engine\nfrom pymongo import MongoClient\nfrom datetime import datetime\n\n# 创建示例数据\ndata = {\n    'name': ['张三', '李四', '王五', '赵六', '钱七'],\n    'age': [25, 30, 35, 28, 32],\n    'salary': [8000, 12000, 15000, 9000, 13000],\n    'department': ['技术', '销售', '技术', '市场', '销售'],\n    'join_date': ['2020-01-01', '2019-06-15', '2021-03-01', '2020-08-01', '2018-12-01']\n}\n\n# 创建DataFrame\ndf = pd.DataFrame(data)\n\n# 1. SQLite数据库导出\nclass SQLiteExporter:\n    def __init__(self, db_path: str):\n        self.db_path = db_path\n    \n    def export_data(self, df: pd.DataFrame, table_name: str):\n        \"\"\"导出数据到SQLite数据库\"\"\"\n        try:\n            conn = sqlite3.connect(self.db_path)\n            \n            # 创建表\n            df.to_sql(table_name, conn, if_exists='replace', index=False)\n            \n            # 创建索引\n            cursor = conn.cursor()\n            cursor.execute(f'CREATE INDEX idx_name ON {table_name}(name)')\n            \n            conn.commit()\n            conn.close()\n            \n            print(f'成功导出{len(df)}条记录到SQLite表{table_name}')\n        except Exception as e:\n            print(f'SQLite导出错误：{str(e)}')\n            raise\n\n# 示例使用\nsqlite_exporter = SQLiteExporter('employees.db')\nsqlite_exporter.export_data(df, 'employees')\n\n# 2. MySQL数据库导出\nclass MySQLExporter:\n    def __init__(self, host: str, user: str, password: str, database: str):\n        self.connection_params = {\n            'host': host,\n            'user': user,\n            'password': password,\n            'database': database\n        }\n    \n    def export_data(self, df: pd.DataFrame, table_name: str):\n        \"\"\"导出数据到MySQL数据库\"\"\"\n        try:\n            # 创建SQLAlchemy引擎\n            engine = create_engine(\n                f\"mysql+pymysql://{self.connection_params['user']}:\"\n                f\"{self.connection_params['password']}@\"\n                f\"{self.connection_params['host']}/\"\n                f\"{self.connection_params['database']}\"\n            )\n            \n            # 导出数据\n            df.to_sql(table_name, engine, if_exists='replace',\n                      index=False, method='multi')\n            \n            # 创建索引\n            with engine.connect() as conn:\n                conn.execute(\n                    f'CREATE INDEX idx_name ON {table_name}(name)'\n                )\n            \n            print(f'成功导出{len(df)}条记录到MySQL表{table_name}')\n        except Exception as e:\n            print(f'MySQL导出错误：{str(e)}')\n            raise\n\n# 示例使用（注释掉实际MySQL调用）\n'''\nmysql_exporter = MySQLExporter(\n    host='localhost',\n    user='root',\n    password='password',\n    database='employees'\n)\nmysql_exporter.export_data(df, 'employees')\n'''\n\n# 3. PostgreSQL数据库导出\nclass PostgreSQLExporter:\n    def __init__(self, host: str, user: str, password: str,\n                 database: str, port: int = 5432):\n        self.connection_params = {\n            'host': host,\n            'user': user,\n            'password': password,\n            'database': database,\n            'port': port\n        }\n    \n    def export_data(self, df: pd.DataFrame, table_name: str,\n                    schema: str = 'public'):\n        \"\"\"导出数据到PostgreSQL数据库\"\"\"\n        try:\n            # 创建SQLAlchemy引擎\n            engine = create_engine(\n                f\"postgresql://{self.connection_params['user']}:\"\n                f\"{self.connection_params['password']}@\"\n                f\"{self.connection_params['host']}:\"\n                f\"{self.connection_params['port']}/\"\n                f\"{self.connection_params['database']}\"\n            )\n            \n            # 导出数据\n            df.to_sql(table_name, engine, schema=schema,\n                      if_exists='replace', index=False)\n            \n            # 创建索引\n            with engine.connect() as conn:\n                conn.execute(\n                    f'CREATE INDEX idx_name ON {schema}.{table_name}(name)'\n                )\n            \n            print(f'成功导出{len(df)}条记录到PostgreSQL表{schema}.{table_name}')\n        except Exception as e:\n            print(f'PostgreSQL导出错误：{str(e)}')\n            raise\n\n# 示例使用（注释掉实际PostgreSQL调用）\n'''\npostgres_exporter = PostgreSQLExporter(\n    host='localhost',\n    user='postgres',\n    password='password',\n    database='employees'\n)\npostgres_exporter.export_data(df, 'employees')\n'''\n\n# 4. MongoDB数据库导出\nclass MongoDBExporter:\n    def __init__(self, host: str, port: int = 27017,\n                 username: str = None, password: str = None):\n        self.connection_params = {\n            'host': host,\n            'port': port,\n            'username': username,\n            'password': password\n        }\n    \n    def export_data(self, df: pd.DataFrame, database: str,\n                    collection: str):\n        \"\"\"导出数据到MongoDB数据库\"\"\"\n        try:\n            # 连接MongoDB\n            client = MongoClient(\n                host=self.connection_params['host'],\n                port=self.connection_params['port'],\n                username=self.connection_params['username'],\n                password=self.connection_params['password']\n            )\n            \n            # 选择数据库和集合\n            db = client[database]\n            collection = db[collection]\n            \n            # 转换数据为字典列表\n            records = df.to_dict('records')\n            \n            # 添加时间戳\n            for record in records:\n                record['created_at'] = datetime.now()\n            \n            # 插入数据\n            result = collection.insert_many(records)\n            \n            # 创建索引\n            collection.create_index('name')\n            collection.create_index('created_at')\n            \n            print(f'成功导出{len(result.inserted_ids)}条记录到MongoDB集合{collection.name}')\n        except Exception as e:\n            print(f'MongoDB导出错误：{str(e)}')\n            raise\n        finally:\n            client.close()\n\n# 示例使用（注释掉实际MongoDB调用）\n'''\nmongo_exporter = MongoDBExporter(\n    host='localhost',\n    username='admin',\n    password='password'\n)\nmongo_exporter.export_data(df, 'employees_db', 'employees')\n'''\n\n# 5. 批量导出到多个数据库\nclass MultiDBExporter:\n    def __init__(self):\n        self.exporters = {}\n    \n    def add_exporter(self, name: str, exporter: object):\n        \"\"\"添加导出器\"\"\"\n        self.exporters[name] = exporter\n    \n    def export_data(self, df: pd.DataFrame, **kwargs):\n        \"\"\"导出数据到多个数据库\"\"\"\n        results = {}\n        errors = {}\n        \n        for name, exporter in self.exporters.items():\n            try:\n                exporter.export_data(df, **kwargs)\n                results[name] = 'success'\n            except Exception as e:\n                errors[name] = str(e)\n        \n        return {\n            'success': results,\n            'errors': errors\n        }\n\n# 示例使用（注释掉实际多数据库导出）\n'''\n# 创建多数据库导出器\nmulti_exporter = MultiDBExporter()\n\n# 添加各种导出器\nmulti_exporter.add_exporter('sqlite', sqlite_exporter)\nmulti_exporter.add_exporter('mysql', mysql_exporter)\nmulti_exporter.add_exporter('postgres', postgres_exporter)\nmulti_exporter.add_exporter('mongodb', mongo_exporter)\n\n# 执行批量导出\nresults = multi_exporter.export_data(\n    df,\n    table_name='employees',  # 用于SQL数据库\n    database='employees_db',  # 用于MongoDB\n    collection='employees'    # 用于MongoDB\n)\n\n# 打印结果\nprint('导出结果：')\nprint('成功：', results['success'])\nprint('错误：', results['errors'])\n'''",
  "category_id": "data_export",
  "tags": ["数据导出", "数据库", "SQL", "MongoDB"],
  "use_count": 0,
  "created_at": "2024-01-23T00:00:00",
  "updated_at": "2024-01-23T00:00:00"
} 