{
  "id": "data_cleaning",
  "title": "数据清洗",
  "description": "常用的数据清洗和预处理操作示例",
  "code": "import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\n# 创建示例数据\ndata = {\n    '姓名': ['张三', '李四', None, '王五', '赵六', '张三'],\n    '年龄': [25, 30, 35, None, 40, 25],\n    '工资': [8000, 12000, 15000, 9000, None, 8000],\n    '部门': ['技术', '销售', '技术', None, '销售', '技术'],\n    '入职日期': ['2023-01-01', '2023-02-01', '2023/03/01', '2023.04.01', '2023-05-01', '2023-01-01']\n}\n\ndf = pd.DataFrame(data)\nprint('原始数据：')\nprint(df)\nprint('\\n数据基本信息：')\nprint(df.info())\n\n# 1. 处理重复行\nprint('\\n处理重复行：')\nprint(f'重复行数量：{df.duplicated().sum()}')\ndf_clean = df.drop_duplicates()\nprint('删除重复行后：')\nprint(df_clean)\n\n# 2. 处理缺失值\nprint('\\n处理缺失值：')\nprint('缺失值统计：')\nprint(df_clean.isnull().sum())\n\n# 数值列用均值填充\ndf_clean['年龄'].fillna(df_clean['年龄'].mean(), inplace=True)\ndf_clean['工资'].fillna(df_clean['工资'].mean(), inplace=True)\n\n# 分类列用众数填充\ndf_clean['姓名'].fillna(df_clean['姓名'].mode()[0], inplace=True)\ndf_clean['部门'].fillna(df_clean['部门'].mode()[0], inplace=True)\n\nprint('\\n填充后的数据：')\nprint(df_clean)\n\n# 3. 数据格式统一\n# 统一日期格式\ndef standardize_date(date_str):\n    if pd.isna(date_str):\n        return None\n    # 替换常见的日期分隔符\n    date_str = date_str.replace('/', '-').replace('.', '-')\n    return pd.to_datetime(date_str).strftime('%Y-%m-%d')\n\ndf_clean['入职日期'] = df_clean['入职日期'].apply(standardize_date)\n\n# 4. 异常值处理\ndef handle_outliers(df, column, n_std=3):\n    mean = df[column].mean()\n    std = df[column].std()\n    # 将超过n个标准差的值替换为上下限\n    df[column] = df[column].clip(lower=mean - n_std * std,\n                               upper=mean + n_std * std)\n    return df\n\n# 处理数值列的异常值\ndf_clean = handle_outliers(df_clean, '年龄')\ndf_clean = handle_outliers(df_clean, '工资')\n\n# 5. 数据标准化\n# 对数值列进行标准化\nscaler = StandardScaler()\nnumeric_cols = ['年龄', '工资']\ndf_clean[numeric_cols] = scaler.fit_transform(df_clean[numeric_cols])\n\n# 6. 类别编码\n# 对分类列进行编码\nle = LabelEncoder()\ndf_clean['部门_编码'] = le.fit_transform(df_clean['部门'])\n\nprint('\\n最终处理后的数据：')\nprint(df_clean)\n\n# 7. 数据质量报告\nprint('\\n数据质量报告：')\nprint('数据形状:', df_clean.shape)\nprint('\\n数据类型：')\nprint(df_clean.dtypes)\nprint('\\n描述性统计：')\nprint(df_clean.describe())\nprint('\\n分类变量统计：')\nprint(df_clean['部门'].value_counts())",
  "category_id": "data_preprocess",
  "tags": ["数据预处理", "数据清洗", "Pandas", "异常值处理"],
  "use_count": 0,
  "created_at": "2024-01-22T10:00:00Z",
  "updated_at": "2024-01-22T10:00:00Z"
} 