{
  "id": "data_visualization_3",
  "title": "Plotly交互式可视化",
  "description": "使用Plotly创建交互式数据可视化",
  "code": "import plotly.express as px\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\n\n# 创建示例数据\nnp.random.seed(42)\n\n# 时间序列数据\ndates = pd.date_range('2024-01-01', '2024-12-31', freq='D')\ndf_time = pd.DataFrame({\n    'date': dates,\n    'value': np.random.normal(100, 15, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 20,\n    'category': np.random.choice(['A', 'B', 'C'], len(dates))\n})\n\n# 1. 交互式折线图\nfig = px.line(df_time, x='date', y='value', color='category',\n              title='交互式时间序列图',\n              labels={'date': '日期', 'value': '数值', 'category': '类别'})\nfig.show()\n\n# 散点数据\ndf_scatter = pd.DataFrame({\n    'x': np.random.normal(0, 1, 100),\n    'y': np.random.normal(0, 1, 100),\n    'size': np.random.uniform(10, 50, 100),\n    'category': np.random.choice(['类型1', '类型2', '类型3'], 100),\n    'value': np.random.uniform(0, 100, 100)\n})\n\n# 2. 交互式散点图\nfig = px.scatter(df_scatter, x='x', y='y',\n                 size='size', color='value', hover_data=['category'],\n                 title='交互式散点图',\n                 labels={'x': 'X轴', 'y': 'Y轴', 'size': '大小',\n                         'color': '颜色值', 'category': '类别'})\nfig.show()\n\n# 3. 交互式柱状图\ndf_bar = pd.DataFrame({\n    'category': ['A', 'B', 'C', 'D', 'E'],\n    'value1': np.random.randint(50, 100, 5),\n    'value2': np.random.randint(30, 80, 5)\n})\n\nfig = go.Figure(data=[\n    go.Bar(name='系列1', x=df_bar['category'], y=df_bar['value1']),\n    go.Bar(name='系列2', x=df_bar['category'], y=df_bar['value2'])\n])\n\nfig.update_layout(\n    title='交互式分组柱状图',\n    xaxis_title='类别',\n    yaxis_title='数值',\n    barmode='group'\n)\nfig.show()\n\n# 4. 3D散点图\ndf_3d = pd.DataFrame({\n    'x': np.random.normal(0, 1, 100),\n    'y': np.random.normal(0, 1, 100),\n    'z': np.random.normal(0, 1, 100),\n    'color': np.random.uniform(0, 100, 100),\n    'size': np.random.uniform(5, 25, 100)\n})\n\nfig = px.scatter_3d(df_3d, x='x', y='y', z='z',\n                    color='color', size='size',\n                    title='交互式3D散点图')\nfig.show()\n\n# 5. 热力图\nmatrix = np.random.rand(10, 10)\nfig = px.imshow(matrix,\n                labels=dict(x='X轴', y='Y轴', color='值'),\n                title='交互式热力图')\nfig.show()\n\n# 6. 箱线图\ndf_box = pd.DataFrame({\n    'group': np.repeat(['A', 'B', 'C', 'D'], 100),\n    'value': np.concatenate([\n        np.random.normal(0, 1, 100),\n        np.random.normal(2, 1.5, 100),\n        np.random.normal(-1, 2, 100),\n        np.random.normal(3, 0.8, 100)\n    ])\n})\n\nfig = px.box(df_box, x='group', y='value',\n             title='交互式箱线图',\n             labels={'group': '组别', 'value': '数值'})\nfig.show()\n\n# 7. 地图可视化\ndf_map = px.data.gapminder().query('year==2007')\nfig = px.scatter_geo(df_map, locations='iso_alpha',\n                     color='continent',\n                     hover_name='country',\n                     size='pop',\n                     projection='natural earth',\n                     title='2007年世界人口分布')\nfig.show()",
  "category_id": "data_visualization",
  "tags": ["plotly", "数据可视化", "交互式图表"],
  "use_count": 0,
  "created_at": "2024-01-23T00:00:00",
  "updated_at": "2024-01-23T00:00:00"
} 