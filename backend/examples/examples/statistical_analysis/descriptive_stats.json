{
  "id": "statistical_analysis_1",
  "title": "描述性统计分析",
  "description": "使用Python进行基础的描述性统计分析",
  "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 设置中文显示\nplt.rcParams['font.sans-serif'] = ['SimHei']\nplt.rcParams['axes.unicode_minus'] = False\n\n# 创建示例数据\nnp.random.seed(42)\ndata = np.concatenate([\n    np.random.normal(100, 15, 1000),  # 正态分布数据\n    np.random.uniform(60, 140, 200)   # 均匀分布数据\n])\n\n# 转换为DataFrame\ndf = pd.DataFrame({\n    '得分': data,\n    '组别': np.random.choice(['A组', 'B组', 'C组'], len(data))\n})\n\n# 1. 基本统计量\nprint('基本统计描述：')\nprint(df['得分'].describe())\n\n# 2. 集中趋势度量\nprint('\\n集中趋势指标：')\nprint(f'均值: {np.mean(data):.2f}')\nprint(f'中位数: {np.median(data):.2f}')\nprint(f'众数: {stats.mode(data)[0][0]:.2f}')\n\n# 3. 离散趋势度量\nprint('\\n离散趋势指标：')\nprint(f'方差: {np.var(data):.2f}')\nprint(f'标准差: {np.std(data):.2f}')\nprint(f'变异系数: {np.std(data)/np.mean(data):.2f}')\nprint(f'极差: {np.ptp(data):.2f}')\nprint(f'四分位距: {np.percentile(data, 75) - np.percentile(data, 25):.2f}')\n\n# 4. 分布形态度量\nprint('\\n分布形态指标：')\nprint(f'偏度: {stats.skew(data):.2f}')\nprint(f'峰度: {stats.kurtosis(data):.2f}')\n\n# 5. 分位数统计\nprint('\\n分位数统计：')\npercentiles = [0, 25, 50, 75, 100]\nfor p in percentiles:\n    print(f'{p}分位数: {np.percentile(data, p):.2f}')\n\n# 6. 可视化分析\n# 直方图和核密度图\nplt.figure(figsize=(12, 4))\n\nplt.subplot(121)\nsns.histplot(data=df, x='得分', bins=30)\nplt.title('得分分布直方图')\n\nplt.subplot(122)\nsns.kdeplot(data=df, x='得分', hue='组别')\nplt.title('得分密度图（按组别）')\n\nplt.tight_layout()\nplt.show()\n\n# 箱线图和小提琴图\nplt.figure(figsize=(12, 4))\n\nplt.subplot(121)\nsns.boxplot(data=df, x='组别', y='得分')\nplt.title('得分箱线图（按组别）')\n\nplt.subplot(122)\nsns.violinplot(data=df, x='组别', y='得分')\nplt.title('得分小提琴图（按组别）')\n\nplt.tight_layout()\nplt.show()\n\n# 7. Q-Q图（检验正态性）\nfig = plt.figure(figsize=(10, 4))\n\nplt.subplot(121)\nstats.probplot(data, dist='norm', plot=plt)\nplt.title('Q-Q图')\n\nplt.subplot(122)\nsns.histplot(data=df, x='得分', stat='density')\nsns.kdeplot(data=df, x='得分', color='red')\n\n# 添加理论正态分布曲线\nx = np.linspace(data.min(), data.max(), 100)\nplt.plot(x, stats.norm.pdf(x, np.mean(data), np.std(data)),\n         'g--', label='理论正态分布')\nplt.title('实际分布 vs 理论正态分布')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n\n# 8. 分组统计\nprint('\\n分组统计：')\ngroup_stats = df.groupby('组别')['得分'].agg([\n    'count', 'mean', 'std', 'min',\n    lambda x: np.percentile(x, 25),\n    'median',\n    lambda x: np.percentile(x, 75),\n    'max'\n]).round(2)\ngroup_stats.columns = ['样本量', '均值', '标准差', '最小值',\n                      '25分位数', '中位数', '75分位数', '最大值']\nprint(group_stats)",
  "category_id": "statistical_analysis",
  "tags": ["统计分析", "描述统计", "数据分析"],
  "use_count": 0,
  "created_at": "2024-01-23T00:00:00",
  "updated_at": "2024-01-23T00:00:00"
} 