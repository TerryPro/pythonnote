{
    "id": "basic_stats",
    "title": "基础统计分析",
    "description": "使用scipy和statsmodels进行基础统计分析",
    "code": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 设置中文显示\nplt.rcParams['font.sans-serif'] = ['SimHei']\nplt.rcParams['axes.unicode_minus'] = False\n\n# 创建示例数据\nnp.random.seed(42)\nsize = 1000\n\n# 生成两组正态分布数据\ngroup1 = np.random.normal(100, 15, size)  # 均值100，标准差15\ngroup2 = np.random.normal(105, 15, size)  # 均值105，标准差15\n\n# 创建DataFrame\ndf = pd.DataFrame({\n    '组别A': group1,\n    '组别B': group2\n})\n\n# 1. 描述性统计\nprint('描述性统计：')\nprint(df.describe())\n\n# 2. 正态性检验（Shapiro-Wilk检验）\nprint('\\n正态性检验：')\nfor column in df.columns:\n    stat, p_value = stats.shapiro(df[column])\n    print(f'{column}:')\n    print(f'统计量: {stat:.4f}')\n    print(f'P值: {p_value:.4f}')\n    print(f'是否服从正态分布: {p_value > 0.05}\\n')\n\n# 3. 直方图和密度图\nplt.figure(figsize=(12, 6))\nfor column in df.columns:\n    sns.histplot(data=df, x=column, kde=True, alpha=0.5, label=column)\nplt.title('数据分布直方图')\nplt.xlabel('值')\nplt.ylabel('频数')\nplt.legend()\nplt.show()\n\n# 4. 箱线图\nplt.figure(figsize=(8, 6))\nsns.boxplot(data=df)\nplt.title('箱线图比较')\nplt.ylabel('值')\nplt.show()\n\n# 5. 独立样本t检验\nt_stat, p_value = stats.ttest_ind(df['组别A'], df['组别B'])\nprint('\\n独立样本t检验结果：')\nprint(f'T统计量: {t_stat:.4f}')\nprint(f'P值: {p_value:.4f}')\nprint(f'两组均值是否有显著差异: {p_value < 0.05}')\n\n# 6. 相关性分析\ncorr = df.corr()\nplt.figure(figsize=(8, 6))\nsns.heatmap(corr, annot=True, cmap='coolwarm', center=0)\nplt.title('相关性热力图')\nplt.show()\n\n# 7. 基本统计量汇总\nprint('\\n基本统计量汇总：')\nprint(f\"组别A均值: {df['组别A'].mean():.2f}\")\nprint(f\"组别B均值: {df['组别B'].mean():.2f}\")\nprint(f\"组别A标准差: {df['组别A'].std():.2f}\")\nprint(f\"组别B标准差: {df['组别B'].std():.2f}\")\nprint(f\"组别A中位数: {df['组别A'].median():.2f}\")\nprint(f\"组别B中位数: {df['组别B'].median():.2f}\")\n\n# 8. 置信区间\nconf_int_A = stats.t.interval(alpha=0.95, df=len(df['组别A'])-1,\n                           loc=np.mean(df['组别A']),\n                           scale=stats.sem(df['组别A']))\nconf_int_B = stats.t.interval(alpha=0.95, df=len(df['组别B'])-1,\n                           loc=np.mean(df['组别B']),\n                           scale=stats.sem(df['组别B']))\n\nprint('\\n95%置信区间：')\nprint(f'组别A: [{conf_int_A[0]:.2f}, {conf_int_A[1]:.2f}]')\nprint(f'组别B: [{conf_int_B[0]:.2f}, {conf_int_B[1]:.2f}]')",
    "category_id": "statistical_analysis",
    "tags": ["统计分析", "假设检验", "可视化", "scipy", "statsmodels"],
    "use_count": 0,
    "created_at": "2024-01-22T10:00:00Z",
    "updated_at": "2024-01-22T10:00:00Z"
  }